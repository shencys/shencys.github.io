<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树链剖分入门</title>
      <link href="/2019/10/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>我们先来看这么个题：</p><p>给你一棵树，每次可能修改一条路径上的值，或是修改一整棵子树上的值，现在有多次查询，要查询一条链上的最大值（或是和），或是查询一棵子树上的最大值(或是和)。<a href="https://www.luogu.org/problem/P3384" target="_blank" rel="noopener">模板题</a>，我们考虑最暴力的做法，对于每一条链，求LCA，然后暴力修改，这不用想就知道绝对要凉。那么我们想一想，如果我们维护的不是一棵树，而是一个链，那么我们有很多种方法来维护了(线段树，树状数组，主席树，分块等等等等)，那么我们是不是只要把一棵树变成一条链就可以了？</p><p>那么我们考虑最简单的变法：$dfs$序。具体的操作我们发现有很多种，这里介绍最简单的一种(除了这种其他都不会系列)叫轻重边剖分。那么我们先来搞个定义：对于树上的每一个节点，$size_i$表示i号节点的子树大小，那么我们在定义对于一个节点的所有子树，$size$最大的儿子就是这个节点的重儿子，另外的都是轻儿子，连接重儿子和父亲的边叫重边，其余的叫轻边，由多条重边组成的路径就叫重路径。</p><p>直观的就是下图：</p><p><img src="\images\树链剖分.png" alt="红边即重边"></p><p>嗯，好，那么接下来的事就很简单了：我们对整棵树进行dfs，优先扫重边。这样的话一条重链上的点的dfn就是连续的，所以我们对重链就可以快速修改了：对于每一条路径，我们可以将其拆分成多条重链和多条轻边，对于轻边，我们无视，应为轻边的两端一定是重链(特殊的，一个点也算重链)，所以，我们可以采用LCA的方式，每一次找出重链的顶点，然后逐层上推，知道两点会和。具体的看我代码吧(自认为还是非常清楚地)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">char</span> ch=getchar();</span><br><span class="line">   <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)w=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">   <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) s=s*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">   <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num_edge,head[<span class="number">1000001</span>],n,m,x,y,typ,cnt,root,mod,a,b,z,ans,ds[<span class="number">1000001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,next;</span><br><span class="line">&#125;edge[<span class="number">10000001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dhu</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,dis,laze_tag;</span><br><span class="line">&#125;tree[<span class="number">10000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++num_edge].to=to;</span><br><span class="line">edge[num_edge].next=head[from];</span><br><span class="line">head[from]=num_edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Jie</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> max_son,z,zhong,size,father,dep,top,dfn;</span><br><span class="line">&#125;jie[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">jie[a].top=a;</span><br><span class="line">jie[a].father=fa;</span><br><span class="line">jie[a].dep=jie[jie[a].father].dep+<span class="number">1</span>;</span><br><span class="line">jie[a].size=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[a];i;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(edge[i].to!=fa)</span><br><span class="line">&#123;</span><br><span class="line">dfs1(edge[i].to,a);</span><br><span class="line">jie[a].size+=jie[edge[i].to].size;</span><br><span class="line"><span class="keyword">if</span>(jie[a].max_son&lt;jie[edge[i].to].size)</span><br><span class="line">jie[a].zhong=edge[i].to,jie[a].max_son=jie[edge[i].to].size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> fa,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jie[a].dfn!=<span class="number">0</span>||a==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">jie[a].dfn=++cnt;</span><br><span class="line">ds[cnt]=a;</span><br><span class="line">jie[a].top=to;</span><br><span class="line">dfs2(jie[a].zhong,a,to);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[a];i;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(edge[i].to!=fa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(edge[i].to!=jie[a].zhong)</span><br><span class="line">dfs2(edge[i].to,a,edge[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> no,<span class="keyword">int</span> s,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[no].l=s;</span><br><span class="line">tree[no].r=l;</span><br><span class="line"><span class="keyword">if</span>(tree[no].l==tree[no].r)</span><br><span class="line">&#123;</span><br><span class="line">tree[no].dis=jie[ds[l]].z;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">build(no*<span class="number">2</span>,s,(s+l)/<span class="number">2</span>);</span><br><span class="line">build(no*<span class="number">2</span>+<span class="number">1</span>,(s+l)/<span class="number">2</span>+<span class="number">1</span>,l);</span><br><span class="line">tree[no].dis=tree[no*<span class="number">2</span>+<span class="number">1</span>].dis+tree[no*<span class="number">2</span>].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xie</span><span class="params">(<span class="keyword">int</span> ji,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[ji].l&gt;r||tree[ji].r&lt;l)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[ji].l&gt;=l&amp;&amp;tree[ji].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[ji].l==tree[ji].r)</span><br><span class="line">&#123;</span><br><span class="line">tree[ji].dis+=z;</span><br><span class="line">tree[ji].dis%=mod;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tree[ji].laze_tag+=z;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">xie(ji*<span class="number">2</span>,l,r,z),xie(ji*<span class="number">2</span>+<span class="number">1</span>,l,r,z);</span><br><span class="line">tree[ji].dis=tree[ji*<span class="number">2</span>].dis+tree[ji*<span class="number">2</span>].laze_tag*(tree[ji*<span class="number">2</span>].r-           tree[ji*<span class="number">2</span>].l+<span class="number">1</span>)+tree[ji*<span class="number">2</span>+<span class="number">1</span>].dis+tree[ji*<span class="number">2</span>+<span class="number">1</span>].laze_tag*(tree[ji*<span class="number">2</span>+<span class="number">1</span>].r-tree[ji*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tree[ji].dis%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">look</span><span class="params">(<span class="keyword">int</span> ji,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ji&lt;&lt;" ";</span></span><br><span class="line"><span class="keyword">if</span>(tree[ji].l&gt;r||tree[ji].r&lt;l)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[ji].l==tree[ji].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (tree[ji].dis+tree[ji].laze_tag)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[ji].l&gt;=l&amp;&amp;tree[ji].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tree[ji].dis+=(tree[ji].r-tree[ji].l+<span class="number">1</span>)*tree[ji].laze_tag;</span><br><span class="line">tree[ji].dis%=mod;</span><br><span class="line">tree[ji*<span class="number">2</span>].laze_tag+=tree[ji].laze_tag;</span><br><span class="line">tree[ji*<span class="number">2</span>+<span class="number">1</span>].laze_tag+=tree[ji].laze_tag;</span><br><span class="line">tree[ji].laze_tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> tree[ji].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[ji].dis+=(tree[ji].r-tree[ji].l+<span class="number">1</span>)*tree[ji].laze_tag;</span><br><span class="line">tree[ji].dis%=mod;</span><br><span class="line">tree[ji*<span class="number">2</span>].laze_tag+=tree[ji].laze_tag;</span><br><span class="line">tree[ji*<span class="number">2</span>+<span class="number">1</span>].laze_tag+=tree[ji].laze_tag;</span><br><span class="line">tree[ji].laze_tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (look(ji*<span class="number">2</span>,l,r)+look(ji*<span class="number">2</span>+<span class="number">1</span>,l,r))%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"test:\n";</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tree[a].l&lt;&lt;<span class="string">" "</span>&lt;&lt;tree[a].r&lt;&lt;<span class="string">" "</span>&lt;&lt;tree[a].dis&lt;&lt;<span class="string">" "</span>&lt;&lt;tree[a].laze_tag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[a].l!=tree[a].r)</span><br><span class="line">&#123;</span><br><span class="line">test(a*<span class="number">2</span>);</span><br><span class="line">test(a*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"test end\n";</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;jie[i].dep&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].dfn&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].father&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].max_son&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].size&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].top&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].z&lt;&lt;<span class="string">" "</span>&lt;&lt;jie[i].zhong;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">m=read();</span><br><span class="line">root=read();</span><br><span class="line">mod=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">jie[i].z=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    a=read();</span><br><span class="line">    b=read();</span><br><span class="line">    add_edge(a,b);</span><br><span class="line">    add_edge(b,a);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(root,<span class="number">0</span>);</span><br><span class="line">dfs2(root,<span class="number">0</span>,root);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="comment">//test1(); </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">typ=read();</span><br><span class="line"><span class="keyword">if</span>(typ==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line">y=read();</span><br><span class="line">z=read();</span><br><span class="line"><span class="keyword">while</span>(jie[x].top!=jie[y].top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(jie[jie[x].top].dep&lt;jie[jie[y].top].dep)</span><br><span class="line">swap(x,y);</span><br><span class="line">xie(<span class="number">1</span>,jie[jie[x].top].dfn,jie[x].dfn,z);</span><br><span class="line">x=jie[jie[x].top].father;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jie[x].dep&gt;jie[y].dep)</span><br><span class="line">swap(x,y);</span><br><span class="line">xie(<span class="number">1</span>,jie[x].dfn,jie[y].dfn,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(typ==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line">y=read();</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl&lt;&lt;jie[x].dfn&lt;&lt;" "&lt;&lt;jie[y].dfn&lt;&lt;endl;</span></span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(jie[x].top!=jie[y].top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(jie[jie[x].top].dep&lt;jie[jie[y].top].dep)</span><br><span class="line">swap(x,y);</span><br><span class="line">ans+=look(<span class="number">1</span>,jie[jie[x].top].dfn,jie[x].dfn);</span><br><span class="line">x=jie[jie[x].top].father;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jie[x].dep&gt;jie[y].dep)</span><br><span class="line">swap(x,y);</span><br><span class="line">ans+=look(<span class="number">1</span>,jie[x].dfn,jie[y].dfn);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(typ==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line">z=read();</span><br><span class="line">xie(<span class="number">1</span>,jie[x].dfn,jie[x].dfn+jie[x].size<span class="number">-1</span>,z);  </span><br><span class="line">            <span class="comment">//对于一棵子树，他们的dfn许是连续的所以我们可以直接从线段树上修改。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(typ==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;look(<span class="number">1</span>,jie[x].dfn,jie[x].dfn+jie[x].size<span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数与结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数与结构 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱</title>
      <link href="/2019/10/02/%E7%88%B1/"/>
      <url>/2019/10/02/%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="gyf与ybh不得入内" />    <label for="pass">gyf与ybh不得入内</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 碎笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scy加密系统</title>
      <link href="/2019/08/26/scy%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/26/scy%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="scy加密系统1-0"><a href="#scy加密系统1-0" class="headerlink" title="scy加密系统1.0"></a>scy加密系统1.0</h1><p>嗯，由于我脸实在太黑了，十连出紫光，随意我觉得我需要将我的文件加密一下，这样老天爷就认不出来我了，哈哈哈。</p><h2 id="第一层加密"><a href="#第一层加密" class="headerlink" title="第一层加密"></a>第一层加密</h2><p>这是最简单的加密了，简单来说就是将每个字符通过某种运算来完成，但是这种加密也是由某种算法生成的，简单来说就是文件写入。当然了，文件内有着很多种数据。</p><h2 id="第二层加密"><a href="#第二层加密" class="headerlink" title="第二层加密"></a>第二层加密</h2><p>第二层加密稍微有点技术含量，这层加密中用了一种加密字符串，对于每个字符串，都可以用轮回加的方法来加密，具体的生成方法和第一层相同。</p><h2 id="第三层加密"><a href="#第三层加密" class="headerlink" title="第三层加密"></a>第三层加密</h2><p>第三层明显更有技术含量，就是将每一个加密后的字符进行二进制展开并取反，空格处用o代替，换行处用l代替。</p><h2 id="第四层加密"><a href="#第四层加密" class="headerlink" title="第四层加密"></a>第四层加密</h2><p>这一层十分草率，只是用密码保护一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狐妖最新章节分析</title>
      <link href="/2019/08/18/%E7%8B%90%E5%A6%96%E6%9C%80%E6%96%B0%E7%AB%A0%E8%8A%82%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/18/%E7%8B%90%E5%A6%96%E6%9C%80%E6%96%B0%E7%AB%A0%E8%8A%82%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>hello,我又闲着没事干开始猜剧情了。</p><p>最近的一话中，王少爷依旧在回忆之中，似乎是之前竹叶篇的成功让小新意识到要想获得成功，重心还是得放在古代，所以最近几话都在讲古代的故事。但是这一话却出现了一把神奇的剑：这把剑和王权剑一个档次。</p><p><img src="/images/实例1.jpg" alt></p><p><img src="/images/实例2.jpg" alt></p><p>可以看到，这个长得有点奇怪的老哥手中这一把闪着蓝光的剑也是非常狠的，从逼格上来说和王权剑差不多，而且从他的那一句“大伯”可以看出他和王权无暮的亲戚关系，那么我们就来猜测一下这个老哥和那把剑的来历：<br>1.这个老哥可能也是王权家人。有可能是王权无暮的哥哥或者表哥之类的，毕竟这种剑法与那句“沙妖是砍不死的”，很有王权家的风范，也和后来的王权霸业一样对妖没好感。</p><p>2.这个老哥可能是张家人，就王权霸业的面具组织来看，李家也是用剑的高手，而且后来张正的黑剑也是非常强，所以这个老哥可能是张家年轻一代的最强者。</p><p>3.关于那把剑。后世王权霸业劈开墙的时候，天门老儿说过，只有一把剑能够劈开这堵墙。从剧情来看，这把剑应该不是王权剑（毕竟王权剑的盗版是第二把，如果是的话，天门老儿应该认识王权剑）所以很有可能，这把剑就是当年劈开天门的那把剑，而且很有可能，这把剑因为某种原因，留在了圈外。</p><p>但愿小新放过王权无暮，别让他像霸业那样惨。</p><p>ps：女主你到是快出来啊！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 狐妖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown编辑器推荐</title>
      <link href="/2019/08/14/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/08/14/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>由于闲得谎，开始写这些奇怪的东西。<br>众所周知，markdown是写blog的主流语法，但是在写的时候，选一个好的编辑器是非常重要的，就好比你在记事本上面写c++代码，不CE算你的本事。</p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>说到markdown编辑器，那就必须将Typora编辑器了。很多人写markdown都喜欢在这个编辑器上写，主要是这个编辑器页面非常的简单清新，一般来说，我的文章都是在这个软件上写的，毕竟看着这种极简风格的编辑器写起文章来也非常舒服，而且作为一个实时渲染的编辑器，有哪里语法错误也是一目了然，写数学公式的预览速度也是杠杠的，所以非常推荐是使用这个编辑器。<br><img src="/images/20170622092419560.jpg" alt="enter description here"><br>ps:这个编辑器的主题有很多，感觉上还是默认的github最好。建议在win10系统上使用。</p><h1 id="VS-code"><a href="#VS-code" class="headerlink" title="VS code"></a>VS code</h1><p>emmm……这个编辑器说实话是我从同学那里听来的，听上去很高大上的样子…但是说句实话这个编辑器还真是挺万能的，不管是写代码、写作文、还是写博客，在这个编辑器上就足够了，毕竟他的功能太多了…不过我个人并不是很推荐这个编辑器，因为单就markdown编辑来说，这个编辑器并非上乘之选，因为单就给人的感觉上，这个编辑器没有Typora好，而就功能上来说吗，他每有别的预览示编辑器全，如果你不希望你的桌面上快捷方式堆得太多的话，一个VS code既就可以顶的上一个markdown编辑器+一个编译器+一个word编辑器。</p><h1 id="专业编辑器"><a href="#专业编辑器" class="headerlink" title="专业编辑器"></a>专业编辑器</h1><p>当你写博客写多了之后，你就会逐渐发现，Typora的弊端也有不少，比如说，你很难直接看到markdown的源码，而且有的时候在打文的时候，用Typora写起来实在有些不顺手(不过打字机模式还是蛮好的)，并且看图片实在有些。。。所以用一些较为专业的markdown编辑器十分有必要，一般来说，这些编辑器都有一个源码栏和一个预览栏，这样的预览效果和编辑效果都十分优秀，这里介绍几款比较优秀的离线编辑器：</p><h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p><img src="/images/maek.png" alt="马克飞象"><br>马克飞象其实严格意义上并非客户端式的编辑器，它的原型是一个网上平台是的编辑器。<a href="https://maxiang.io/" target="_blank" rel="noopener">点击进入</a>,而我觉得这个编辑器还是非常简洁的，没有上方的一堆工具栏，用起来也是十分顺手，不过看着这个名字，实在是高大不起来。。。</p><h2 id="cmd-markdown"><a href="#cmd-markdown" class="headerlink" title="cmd markdown"></a>cmd markdown</h2><p>说实话，这个编辑器我是又爱又恨，爱的是他的清新风格，写起来是十分的舒服，但是。。。这个编辑器·的保存系统我却很无奈，就是我最近在这个编辑器上写了好几篇文章，但是。。。我基本没有保存成功过。</p><p><img src="/images/cmdmarkdown.png" alt></p><h2 id="小书匠"><a href="#小书匠" class="headerlink" title="小书匠"></a>小书匠</h2><p>这个编辑器还是非常专业的，上面的一排跟word稳当工具栏一样的东西还是非常好用的，只是开始界面有点。。。</p><h2 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h2><p>好吧。。。并不是很想用这款东西，就好像vs code的简略版。。。</p><p>以上就是我对markdown编辑器的推荐，谢谢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dijkstra堆优化的小技巧</title>
      <link href="/2019/08/10/dijkstra%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/10/dijkstra%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最短路是图论中非常常见的一种算法，一般来所，很多考试的第三题都会多多少少和最短路算法沾点边，而许多oier常用的是SPFA算法，也就是队列优化后的Bellman-Ford算法，但是实际上，这种算法具有非常大的不稳定性，也就是说，只要出题人愿意，他可以分分钟卡死你。所以一般考试时，只要数据没有到千万级别，一般我们会采用dijkstra堆优化的方式来写最短路。</p><p>所谓dijkstra，就是红白点的一种最短路算法，每次找到所有点中dis值最小的点，以其为起始点来更新其他点的dis值。一般来说，这种算法的实际复杂度为$n^2$,常数上不大(确信)，而我们发现，这里有一部是需要找到所有点中dis值的最小值，我们就可以使用对的方式来优化，可以将复杂度降至(nlogn)(实际上由于点数的膨胀，复杂度可能会超过$2nlogn$),那么在考场上，手写堆是十分耗时的，而且万一写错就彻底爆炸了，所有我们可以采用stl中的一种类堆结构：单调队列(priority_queue)来维护。</p><p>算法原理很简单，就是用单调队列来维护每次找寻的最小值，但是实际操作中却长长有一点小问题：<br>1.默认的stl是从大到小排列的，所以我们要重载小于号为大于号才能让其变成小根堆。</p><p>2.一般来说，这个算法每个点的dis值是在不断变化的，所以我们需要将每个变化的值，连同其坐标一起丢入单调队列之中，每次去除队首元素时，首先判断其是否被用过。</p><p>下面附代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define int long long</span><br><span class="line">const int maxn=10001,maxm=500001;</span><br><span class="line">struct node&#123;</span><br><span class="line">int w,z;</span><br><span class="line">&#125;p;</span><br><span class="line">bool operator&lt;(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line">return a.z&gt;b.z;</span><br><span class="line">&#125;</span><br><span class="line">struct Edge&#123;</span><br><span class="line">int to,next,dis;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line">int head[maxn],num_edge,dis[maxn],n,m,s,t,a,b,c,use[maxn];</span><br><span class="line">void add_edge(int from,int to,int dis)</span><br><span class="line">&#123;</span><br><span class="line">edge[++num_edge].dis=dis;</span><br><span class="line">edge[num_edge].to=to;</span><br><span class="line">edge[num_edge].next=head[from];</span><br><span class="line">head[from]=num_edge;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">void push(int w)</span><br><span class="line">&#123;</span><br><span class="line">node a;</span><br><span class="line">a.w=w;</span><br><span class="line">a.z=dis[w];</span><br><span class="line">q.push(a);</span><br><span class="line">&#125;</span><br><span class="line">void dijkstra(int s)</span><br><span class="line">&#123;</span><br><span class="line">push(s);</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">p=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">if(use[p.w]==1)</span><br><span class="line">continue ;</span><br><span class="line">use[p.w]=1;</span><br><span class="line">for(int i=head[p.w];i;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line">if(dis[edge[i].to]&gt;dis[p.w]+edge[i].dis)</span><br><span class="line">dis[edge[i].to]=dis[p.w]+edge[i].dis,push(edge[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">node a1,a2,a3;</span><br><span class="line">a1.w=1,a1.z=2;</span><br><span class="line">a2.z=4;</span><br><span class="line">a3.z=12;</span><br><span class="line">qwq.push(a1);</span><br><span class="line">qwq.push(a2);</span><br><span class="line">qwq.push(a3);</span><br><span class="line">cout&lt;&lt;qwq.top().z&lt;&lt;&quot; &quot;;</span><br><span class="line">qwq.pop();</span><br><span class="line">cout&lt;&lt;qwq.top().z&lt;&lt;&quot; &quot;;</span><br><span class="line">qwq.pop();</span><br><span class="line">cout&lt;&lt;qwq.top().z&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">//test();</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=2147483647;</span><br><span class="line">&#125;</span><br><span class="line">dis[s]=0;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">add_edge(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(s);</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;dis[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;dis[i]+</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>乘法逆元</title>
      <link href="/2019/08/06/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
      <url>/2019/08/06/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h1 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>如果$ab\equiv1 (\mod p)$,则称b为a关于1 $\%$p的逆元，计b为inv(a).</p><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>在写代码时，很容易遇到要求$\frac{a}{b}\%p$的情况，这样一般求起来很绝望，因为很多人喜欢每个数都模p，这样在加减乘中都是可行的，但是在除中确实不可行的，所以这种情况下我们就要用到乘法逆元。很容易发现，a关于1模p的逆元就是a在模p意义下的倒数，所以$\frac{a}{b}\%p=a \times inv(b)$</p><h2 id="前置知识列表"><a href="#前置知识列表" class="headerlink" title="前置知识列表"></a>前置知识列表</h2><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>$a^{\varphi(n)}\equiv 1 (\mod n)$</p><p>$\varphi(n)$表示小于n中与n互质的数；</p><p>证明：<br>设小于n中与n互质的数为$x_1,x_2,x_3……x_{\varphi(n)}$,将其中的每一个数都乘以a(a与n互质)，得到一个新的数列：{$ax_1,ax_2,……ax_{\varphi(n)}$,},我们将新数列中的每一项模n，可已得到原数列完全相同的数列。既对于任何数</p><p>$x_i \equiv ax_i(\mod n)$,换而言之，新数列中的每一个数模n没有重复。因为a与n互质，任意$x_i$与n也互质，所以有gcd(n,$axi$)=1,根据欧几里得定理，得到gcd(n,$ax_i\% $),n所以任意一个新数列中的数都与n互质。同时，他们也无重复，用反证法来证明，若$ax_1\%n=ax_2\%n$,则有，$n|(ax1-ax2)$,因为a与n互质且(x1-x2)小于n,所以等式不成立，故有新数列无重复元素。</p><p>那么我们将两个式子合并一下，$\coprod\limits_{i=1}^{\varphi(n)}ax_i\equiv \coprod\limits_{i=1}^{\varphi(n)}x_i$ ($\mod p$)</p><p>化简：$a^{\varphi(n)}\equiv\  1 (mod\   n)$</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>对于任何数a 和质数 p ,$a^{p-1}\equiv 1 \ (mod\ p)$</p><p>这个真的没什么好讲的，其实就是欧拉定理的一个特殊情况，由于p是个质数，那么$\varphi(p)=p-1$,根据欧拉定理，$a^{\varphi(p)}\equiv 1 (\mod p)$，所以成立(还是想吐槽一句，费马你是捡漏了吗？)</p><h3 id="欧拉定理拓展"><a href="#欧拉定理拓展" class="headerlink" title="欧拉定理拓展"></a>欧拉定理拓展</h3><p>$a^{b}\equiv\ a^{b  \mod \varphi(n)}\ (mod \ n)$</p><p>证明：<br>$a^{b-b  \mod \varphi(n)}\times a^{b  \mod \varphi(n)}\ \equiv\ a^{b  \mod \varphi(n)}\ (mod \ n)$</p><p>$a^{b-b  \mod \varphi(n)}\equiv 1 (\mod n )$</p><p>因为$b-b\mod \varphi(n)| \varphi(n)$</p><p>设$b-b  \mod \varphi(n)=k\varphi(n)$</p><p>原式变为$a^{k\varphi(n)}\equiv 1 (\mod n)$</p><p>$(a^k)^{\varphi(n)}\equiv 1(\mod n)$</p><p>因为a与n互质，$a^k$与n也互质，</p><p>根据欧拉定理，原式成立。</p><h3 id="拓展欧几里得定理"><a href="#拓展欧几里得定理" class="headerlink" title="拓展欧几里得定理"></a>拓展欧几里得定理</h3><p>$ax1 + by1=gcd(a,b)$</p><p>$bx2 + (a\%b)y2=gcd(b,a\%b)$</p><p>$ax1+ by1=bx2+ [a-a/b*b]y2$</p><p>$ax+ by1=bx2 + ay2-\frac{a}{b}\ y2 \times b$</p><p>$ax1 \times by1 =ay2 \times b(x2-a/by2)$</p><p>既x1=y2,y1=x2-a/b*y2</p><h2 id="乘法逆元的计算"><a href="#乘法逆元的计算" class="headerlink" title="乘法逆元的计算"></a>乘法逆元的计算</h2><h3 id="费马小定理求逆元"><a href="#费马小定理求逆元" class="headerlink" title="费马小定理求逆元"></a>费马小定理求逆元</h3><p>根据费小定理，我们可以将原式子化为$a \times a^{n-2}\equiv 1(\mod n)$</p><p>也就是我们可以用快速幂求出$a^{n-2}$,就可以了。</p><p>但是这样当多次调用逆元时不排除去世的可能。</p>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乘法逆元 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数学提高</title>
      <link href="/2019/08/04/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%8F%90%E9%AB%98/"/>
      <url>/2019/08/04/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%8F%90%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<h1 id="组合数学提高"><a href="#组合数学提高" class="headerlink" title="组合数学提高"></a>组合数学提高</h1><h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>嗯，这个东西就是杨辉三角的公式版</p><p>$(x+y)^n=\sum\limits_{k=0}^{n}C_n^kx^{n-k}y^k$</p><p>将这个公式拆开，得到了这样一个玄学公式：</p><p>$(x+y)^n=C_n^0x^n+C_n^1x^{n-1}y+C_n^2x^{n-2}y^2+……+C_n^{n-1}xy^{n-1}+C_n^ny^n$</p><p>你看这个公式<del>他又大又圆</del>是不是很像某个小学数奥的东西呢？</p><p>没错，这玩意和杨辉三角几乎一毛一样，所以实际上是杨辉三角的一种实现方式。</p><h3 id="等价形式"><a href="#等价形式" class="headerlink" title="等价形式"></a>等价形式</h3><p>$(x+y)^n=\sum\limits_{k=0}^{n}C_n^{n-k}x^{n-k}y^k$</p><p>$(x+y)^n=\sum\limits_{k=0}^{n}C_n^{n-k}x^{k}y^{n-k}$</p><p>$(x+y)^n=\sum\limits_{k=0}^{n}C_n^{k}x^{k}y^{n-k}$</p><p>$(1+x)^n=\sum\limits_{k=0}^nC_n^kx^k$</p><h2 id="我也不知道叫什么定理1"><a href="#我也不知道叫什么定理1" class="headerlink" title="我也不知道叫什么定理1"></a>我也不知道叫什么定理1</h2><p>$C_n^0-C_n^1+C_n^2-C_n^3+……+(-1)^nC_n^n=0$</p><p>即$C_n^0+C_n^2+……=C_n^1+    C_n^3+……=2^{n-1}$</p><p>证明：上面那个我也不知道怎么证，反正它就是对的。。。</p><p>下面那个，根据二项式定理$C_n^0+C_n^1+C_n^2+C_n^3+……+C_n^n=(1+1)^n=2^n$</p><p>又由于$C_n^0+C_n^2+……=C_n^1+    C_n^3+……$,所以其任意一项等于$2^n\div 2=2^{n-1}$</p><p>证毕(确信)</p><h2 id="我也不知道叫什么定理2"><a href="#我也不知道叫什么定理2" class="headerlink" title="我也不知道叫什么定理2"></a>我也不知道叫什么定理2</h2><p>$kC_n^k=nC_{n-1}^{k-1}$</p><p>证明:左式=$k\frac{n!}{(n-k)!k!}=\frac{n!}{(n-k)!k!\div k}$</p><p>​          右式=$n\frac{n!\div n}{(n-k)!k!\div k}=\frac{n!}{(n-k)!k!}$</p><p>​         左式等于右式，证毕。</p><h2 id="我也不知道叫什么定理3"><a href="#我也不知道叫什么定理3" class="headerlink" title="我也不知道叫什么定理3"></a>我也不知道叫什么定理3</h2><p>$C_n^1+2C_n^2+……+nC_n^n=n2^{n-1}$</p><p>既$\sum\limits_{i=1}^niC_n^i=n2^{n-1}$</p><p>证明：使用<strong>我也不知道什么定理2 </strong>得到$1C_n^1 = nC_{n-1}^0$,$2 C_n^2 = nC_{n-1}^1$</p><p>这样就得到了原式$=n C_{n-1}^0+nC_{n-1}^{1}+……+nC_{n-1}^{n-1}$</p><p>​                                  $=n(C_{n-1}^0+C_{n-2}^1+……+C_{n-1}^{m-1})$</p><p>​                                   $=n2^{n-1}$</p><h2 id="我也不知道叫什么定理4"><a href="#我也不知道叫什么定理4" class="headerlink" title="我也不知道叫什么定理4"></a>我也不知道叫什么定理4</h2><p>$1C_n^1+4C_n^2+9C_n^3+……n^2C_n^n=n(n+1)2^{n-2}$</p><p>换而言之就是 $\sum\limits_{i=1}^{n}i^2C_n^i=n(n+1)2^{n-2}$</p><p>证明(这个证明可能会用到前面的很多性质，最好把前面的都看懂了在证明)</p><p>$\sum\limits_{i=1}^{n}i^2C_n^i$</p><p>=$\sum\limits_{i=1}^ni\times n \times C_{n-1}^{i-1}$</p><p>$=\sum\limits_{i=0}^{n-1}C_{n-1}^{i} \times(i+1) \times n$</p><p>$=(\sum\limits_{i=0}^{n-1}C_{n-1}^i\times i+\sum\limits_{i=0}^{n-1}C_{n-1}^i)\times n$</p><p>这里我们将这个式子拆开来，不然实在有点难理解：</p><p>$\sum\limits_{i=0}^{n-1}C_{n-1}^i\times i=\sum\limits_{i=1}^{n-1}iC_{n-1}^i=(n-1)2^{n-2}$</p><p>$\sum\limits_{i=0}^{n-1}C_{n-1}^i=2^{n-1}$</p><p>原式$=((n-1)2^{n-2}+2^{n-1}) \times n$</p><p>​        =$(n+1)2^{n-1}\times n$</p><p>证毕。</p><h2 id="我也不知道叫什么定理5"><a href="#我也不知道叫什么定理5" class="headerlink" title="我也不知道叫什么定理5"></a>我也不知道叫什么定理5</h2><p>$\sum\limits_{i=0}^{n}{C_n^i}^2=C_{2n}^n$</p><p>这个性质我们用感性理解的方式，用例子来说明：<br>两个班，每个班有n个妹子，gyf要从两个班中选择n个妹子来<del>上</del>，那么他的选择总方案是$C_{    2n}^n$,这非常明显，不必多说了。同时我们可以让gyf从一个班中选择i个妹子($0\le i \le n$ ),另一个班中选择(n-i)个妹子，这样的方案数是$C_{n}^i<em>C_{n}^{n-i}$,同时枚举i，就得到总方案数为$\sum\limits_{i=0}^n C_{n}^i</em>C_{n}^{n-i}$,应为$C_{n}^i=C_{n}^{n-i}$,所以总方案数为$\sum\limits_{i=0}^{n}{C_n^i}^2$,很明显两种选择方法是等价的，故性质成立。</p><h2 id="康拓展开"><a href="#康拓展开" class="headerlink" title="康拓展开"></a>康拓展开</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给你一个数列，求这个数列在所有与其相同的数列中的字典序排名(相同的定义是，长度相同且组成元素相同)</p><h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><p>$ans=\sum\limits_{i=1}^{n-1}a_i \times (n-i)!$</p><p>$a_i$表示排名在i之后且字典序小于i的元素。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>数列为{$3,1,4,5,2$},求其排名</p><p>对于3来说，后面有两个数比它小，所以啊a[1]=2;</p><p>对于1来说，后面没有数比它小，所以a[2]=0;</p><p>对于4来说，后面有一个数比它小，所以a[3]=1;</p><p>对于5来说，后面有一个数比它小，所以a[4]=1;</p><p>所以答案就是$4! \times 2+3! \times 0 +2! \times 1 +1! \times 1$</p><h2 id="康拓逆展开"><a href="#康拓逆展开" class="headerlink" title="康拓逆展开"></a>康拓逆展开</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>一个长度为5的序列有1至5组成，其字典序排名为107，问这个序列。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>用和康拓展开相同的思维：在第一位，$107 \div 4!=4 $余$10$,所以第一位之后有4位比它大，故第一位为5</p><p>这样类推下去 就得到了答案。</p><h2 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h2><p>嗯，看到这个标题是不是觉得无比高大上，但是实际上，只要不涉及到更高层次，这种数比其他很多数简单很多。。。</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>将n个数分为k个环，求方案数。</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>$s_n^k$表示将n个数分为k个环的方案数</p><p>有以下转移方程：$s_n^k=(n-1)s_{n-1}^k+s_{n-1}^{k-1}$</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>将新进来的数分成两种，既放入已有的圆中或新开一个圆，在旧圆中共有n-1个位置，所以就有了上面的公式。</p><h2 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>将n个数分成k个集合，求方案数</p><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>$S_n^k$表示将n个数分成k个集合的方案数。</p><p>$S_n^k=kS_{n-1}^k+S_{n-1}^{k-1}$</p><h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><p>将新进来的数分为两类，在已有集合中的方案数为$kS_{n-1}^k$,另一种为$S_{n-1}^{k-1}$</p><h2 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>有一张n*n的图，求从左下角走到右上角且不经过中线的方案。</p><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><p><img src="\images\卡特兰数.png" alt="卡特兰数"></p><p>如图，我们发现，任意一条经过中线的路径(下文称为非法路径)，都会经过对角线上面的一条线，也就是图中的绿线，而将过绿线之后的路径关于绿线对称，就发现每一条非法路径的终点都是点(n+1,n-1)，所以可以看成每条非法路径都可以变成一条从(0,0)到点(n+1,n-1)的路径。</p><p>我们考虑用组合数来表示总路径数：每一条路径都可以看成是由n次向上和n次向右组成的，所以我们只要找出2n次行动中n次向上的可能，就是方案数了，既$C_{2n}^n$,所以一张n*n的图，方案数为$C_{2n}^n-C_{2n}^{n+1}$,化简得$Catalan(n)=\frac{1}{n+1}C_{2n}^n$</p><h3 id="其他形式："><a href="#其他形式：" class="headerlink" title="其他形式："></a>其他形式：</h3><p>$Catalan(n)=\frac{1}{n+1}\sum\limits_{i=0}^n{C_n^i}^2$</p><p>$Catalan(n)=\sum\limits_{i=0}^nCatalan(i)Caltalan(n-i),Catalan(0)=1$</p><p>$Catalan(n+1)=\frac{2(2n+1)}{n+2}Catalan(n),Catalan(0)=1$</p><h2 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h2><p>$C_n^m \%  p=C_{n/p}^{m/p} \times C_{n\%p}^{m\%p}$</p><p>具体证明很复杂，很复杂，建议先去用起来，等到数论成熟了再去用。</p>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数学入门</title>
      <link href="/2019/08/04/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
      <url>/2019/08/04/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="组合数学入门"><a href="#组合数学入门" class="headerlink" title="组合数学入门"></a>组合数学入门</h1><p><del>由于老师直播卡到自闭才开始学习</del></p><h2 id="抽屉原理"><a href="#抽屉原理" class="headerlink" title="抽屉原理"></a>抽屉原理</h2><h3 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h3><p>把 n+1 件东西放入 n 个抽屉，则至少有一个抽屉里放两件或两件以上的东西。</p><p>从令一角度说，把 n-1 件东西放入 n  个抽屉，则至少一个抽屉是空的。</p><h3 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h3><p>对于第一条，考虑最差情况，既每个球都放到一个单独的抽屉里，这样还剩下一个球，将其放到任意一个抽屉里，该抽屉都会有两个，故成立。(第二条证明方法与第一条相似，建议百度)。</p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>给出一个含有 n 个数字的序列，要找一个连续的子序列，使他们的和一定是 c 的倍数(n&lt;=1000000;)</p><p>看到这道题一开始确实没看出来是抽屉原理。。。首先考虑$n^2$的情况，既枚举左端点和右端点，用前缀和来判断，然后TLE了。。。那么这道题和组合数有什么关系呢？我们给每个抽屉标号为0~c-1,代表了$ 当前数 \bmod b$的值，可以发现，如果 $a \bmod b=c \bmod b  (a \geq b )$，则($(a-c) \bmod b=0$),如果我们对于每一位做前缀和处理，sum[i]代表第i位的前缀\和，将每一个sum放入抽屉中，如果有两个sum被放入同一个抽屉，则这两个前缀和之间就是可行区间，就是$if(sum[i] \bmod c=sum[j] \bmod c )    ans= 区间 i -j $</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">sum[i]=sum[i-1]+a[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(chou[sum[i]%c]!=0)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=chou[sum[i]%c];j&lt;=i;j++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else chou[sum[i]%c]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="德·摩根定律"><a href="#德·摩根定律" class="headerlink" title="德·摩根定律"></a>德·摩根定律</h2><h3 id="内容：-1"><a href="#内容：-1" class="headerlink" title="内容："></a>内容：</h3><p>$\lnot(p\vee q )\Longleftrightarrow(\lnot p) \wedge (\lnot q)$</p><p>$\lnot(p\wedge q )\Longleftrightarrow(\lnot p) \vee (\lnot q)$</p><h3 id="证明：-1"><a href="#证明：-1" class="headerlink" title="证明："></a>证明：</h3><p>枚举四种情况即可；</p><h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3><p>$\lnot(p\vee q \vee z)\Longleftrightarrow(\lnot p) \wedge (\lnot q) \wedge (\lnot z)$</p><p>同样可推至多位；</p><p>（<del>虽然我也不知道这和组合数有什么关系</del>）</p><h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>在计数时，必须注意没有重复，没有遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>由于实在是想不出怎么解释了，还是直接上例子吧。。。</p><p>某校六⑴班有学生$45$人，每人在暑假里都参加体育训练队，其中参加足球队的有$25$人，参加排球队的有$22$人，参加游泳队的有$24$人，足球、排球都参加的有$12$人，足球、游泳都参加的有$9$人，排球、游泳都参加的有$8$人，问：三项都参加的有多少人？</p><p>解：容斥原理有一项很重要的内容：奇加偶减：以本体为例，我们先将单独参加的数加上：sum=$25+22+24=71$,再将参加两项的人减去：$sum-=12+9+8=42$,所以ans=$45-42=3$.</p><p>或许这么说有点不清楚，下面这张图或许更直白：</p><p><img src="\images\实例.png" alt="实例"></p><p>容斥原理应用非常广，具体还是看百度吧。</p><h2 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>从 n 个元素的集合 S 中，有序的选出 r 个元素，叫做 S 的一个 r 排列，不同的排列总数$A_n^r$ 或 A(n,r)。</p><p>如果两个排列所含元素不全相同，或所含元素相同但顺序不同，就会被认为是不同的排列。</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>$A_n^m=\frac{n!}{(n-m)!}$</p><h3 id="公式证明："><a href="#公式证明：" class="headerlink" title="公式证明："></a>公式证明：</h3><p>$A_n^m=n\times (n-1)\times (n-2)……\times (n-m+1)=\frac{n!}{(n-m)!}$</p><h3 id="特殊情况："><a href="#特殊情况：" class="headerlink" title="特殊情况："></a>特殊情况：</h3><p>$A_n^n=n!$;</p><h2 id="不全相异元素的全排列"><a href="#不全相异元素的全排列" class="headerlink" title="不全相异元素的全排列:"></a>不全相异元素的全排列:</h2><p>所谓不全相异元素的全排列，是指这样一个问题：若在 n 个元素中，有$n_1$个元素彼此相同,$n_2$个元素彼此相同，…,$n_m$个元素彼此相同，且 $n_1+n_2+…+n_m=n$则这 n 个元素的全排列叫做不全相异元素的全排列。</p><p>其方案数为：$\frac{n!}{n_1!+n_2!+n_3!+…+n_m!}$</p><p>证明: 全排列不考虑重复情况下，方案数为$n!$,而每一位重复的方案数为$n_i!$,将每一种重复的方案除去便得到总方案数。</p><h3 id="错位排列"><a href="#错位排列" class="headerlink" title="错位排列:"></a>错位排列:</h3><h4 id="内容：-2"><a href="#内容：-2" class="headerlink" title="内容："></a>内容：</h4><p>所谓错位排列，既将标号为1至n的小球放入标号为1至n的盒子中，求每个小球的标号都不等于其盒子标号的方案数。</p><h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><p>$D_n=n!*(\frac{1}{2!}-\frac{1}{3!}+….+(-1)^n\frac{1}{n!})$</p><h4 id="公式证明：-1"><a href="#公式证明：-1" class="headerlink" title="公式证明："></a>公式证明：</h4><p>首先，我们假设一对数$1,k$，就是在错排问题中的第一项和第k项，那么对于对于总方案数，我们分为两种情况：</p><p><strong>1.第k项在第1位，第1项在第k位，这样的话，错排的方案数与第k位和第i位无关，为D(n-2)</strong></p><p><strong>2将第1项固定在第1位，剩下的错排，方案数D(n-1),然后将第k项与第1项交换，由于第k项不可能在第k位，所以不会与情况1有重复。</strong></p><p>k共有n-1种情况(2~n),故有公式 $D_n=n-1(D_{n-1}+D_{n-2})$</p><p>化简既的上述公式。(确信)</p><h2 id="圆排列："><a href="#圆排列：" class="headerlink" title="圆排列："></a>圆排列：</h2><h4 id="内容：-3"><a href="#内容：-3" class="headerlink" title="内容："></a>内容：</h4><p>既将n个数据选m个，首尾相连，求方案数；</p><h4 id="公式：-1"><a href="#公式：-1" class="headerlink" title="公式："></a>公式：</h4><p>$ans=\frac{A_n^m}{m}$</p><h4 id="公式证明：-2"><a href="#公式证明：-2" class="headerlink" title="公式证明："></a>公式证明：</h4><p>破圆为链，方案总数为$A_n^m$,变成圆之后，不同开头点的方案变的唯一，故除以m。</p><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p>好，如果你上面这些都看懂了，那么，这节课才刚刚开始。前面那些，你就当我随便说说而已，你完全可以无视掉。</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>从 n 个元素的集合 S 中，无序的选出 r 个元素，叫做 S 的一个 r 组合。</p><p>如果两个组合中，至少有一个元素不同，它们就被认为是不同的组合。</p><p>所有不同组合的个数，叫做组合数</p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>从m个数中取n个数计做$C_m^n$或c(m,n);</p><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><p>$c_m^n=\frac{A_m^n}{n!}=\frac{\frac{n!}{(n-m)!}}{n!}=\frac{n!}{(n-m)!n!}$</p><h3 id="公示证明"><a href="#公示证明" class="headerlink" title="公示证明"></a>公示证明</h3><p>对于c来说，$c_m^n$与$A_m^n$的区别在于将方案求出之后是否进行全排列，全排列的可能方案数为n!故上述公式成立。</p><h3 id="可重复组合数"><a href="#可重复组合数" class="headerlink" title="可重复组合数"></a>可重复组合数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>可重复组合数既在n个数中选择m个数，可重复选取，计做$H_n^m$</p><h4 id="公式-2"><a href="#公式-2" class="headerlink" title="公式"></a>公式</h4><p>$H_n^m=c_{n+m-1}^m=\frac{n+m-1}{m!(n-1)!}$</p><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>可重复组合数的计算公式可以理解为，在n个数的基础上再加上m-1个万能数，这样在选择时，万能数被选就等同于多次选取一个数，可以感性理解一下，比较容易懂。</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>从 A={1,2,…,n} 中选取 m 个不相邻的组合，其组合数为：$C_{n-m+1}^m$,同样感心理解一下，减去的这些数就当成是两数之间的相邻了。</p><h3 id="递推公式："><a href="#递推公式：" class="headerlink" title="递推公式："></a>递推公式：</h3><p>$c_n^m=c_{n-1}^{m-1}+c_{n-1}^{m}$</p><p>证：选取集合中任意一数作为特定数，将答案分为是否选取该特定数，一种情况为选取，情况数既在其他n-1个数中选取m-1个数的方案数，另一种情况既不选取该特定数，情况数既在其他n-1个数中选取m个数。</p><p><strong>以上知识，大概在普及组+，也就是普及组$t4$难度，提高组吗，这些完全不够<del>勇</del>用，深入一点的可以看我的另一篇博客：<a href="https://shencys.github.io/2019/08/04/组合数学提高/#more">组合数学提高</a>.</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于海神阁阁主真实身份的推测</title>
      <link href="/2019/07/29/%E5%85%B3%E4%BA%8E%E6%B5%B7%E7%A5%9E%E9%98%81%E9%98%81%E4%B8%BB%E7%9C%9F%E5%AE%9E%E8%BA%AB%E4%BB%BD%E7%9A%84%E6%8E%A8%E6%B5%8B/"/>
      <url>/2019/07/29/%E5%85%B3%E4%BA%8E%E6%B5%B7%E7%A5%9E%E9%98%81%E9%98%81%E4%B8%BB%E7%9C%9F%E5%AE%9E%E8%BA%AB%E4%BB%BD%E7%9A%84%E6%8E%A8%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>最新一册终极斗罗已在7月中旬出版，这册书可谓信息量爆炸。一边，蓝轩宇率队逐级挑战，竟然直接打到了六年级那里？！你只是要开挂的节奏啊！就算你老爸再怎么<del>垃圾</del>牛逼，在你这个年龄还在<del>吃饭、打铁、泡妞</del>,呃，不对，是好好学习，准备吃饭、打铁、泡妞。另一边，不知道是哪个人脑子瓦特要去抢白银龙枪，<del>史莱克这个废物还没守住</del>，被古月娜在路上拦下，然后抢回了白银龙枪（话说古月娜为毛不拷问一下啊）。<strong>重点来了</strong>，<strong>重点来了</strong>，重复一遍，<strong>重点来了</strong>，在古月娜拿回白银龙枪回来之后，当代海神阁主出现了，<strong>她认识古月娜！</strong>也就是说，这一位海神阁主极有可能是《龙王传说》中某个人物，那么，就让我们推理一下，这位神秘的海神阁主究竟是谁。</p> <a id="more"></a><p>在本书中，作者也是给出了几个关于海神阁主的线索：</p><p>1.海神阁主在某种意义上是敌人。</p><p>2.海神阁主身体很奇特。</p><p>3.海神阁主身边这一位很有可能也是《龙王传说》中某个人物，与海神阁主是师生关系（极有可能有那种关系）。</p><p>这三条线索中的第一条，很多人只是单纯的把它认为是指古月娜和海神阁阁主是属于不同阵营的，但实际上，我认为，这条线索应该指，<strong>海神阁主喜欢过唐舞麟</strong>。那么，我们就可以列出以下几个嫌疑人：1.龙雨雪 2.戴云儿 3.舞丝朵4.凌梓晨 5.蓝佛子。</p><p>首先我们先排除1号嫌疑人，虽然龙雨雪 曾经对唐舞麟动过真情，但以龙雨雪 的修为，实在很难达到神的那个境界，而且在《龙王传说》后期，她基本没戏份。。。而且龙五月也没有理由去特意改造自己的身体，所以我们先排除她；</p><p><img src="/images/首页.jpg" alt="avatar"></p><p>再者是二号人物，戴云儿。众所周知，当年戴云儿是对唐舞麟。。。。过的，但是史莱克学院真的会让她来当海神阁阁主吗？估计困难，而且还是那句话，修为不够。。。</p><p><img src="/images/戴云儿.jpg" alt="avatar"></p><p>接下来，是舞丝朵，嫌疑指数：★ 。舞丝朵可能大家都不太有印象，其实就是那个在唐舞麟刚刚入学时的那个天才少女，后来也是史莱克被炸后第一个与唐舞麟见面的人。之所以说她有嫌疑，是应为当年她在海神湖上海神缘时曾经表白过唐舞麟，而且以舞丝朵的修为，并非不可能成为神（虽然和唐舞麟比起来她的天赋不佳，但她同样的也经历了许多，也曾抗击过深渊位面），但是就算有人陪着她度过那么久，也应该是当初同为史莱克一年级的那几个人，而非他的学生，所以嫌疑不大。</p><p><img src="/images/舞丝朵.jpg" alt="avatar"></p><p><strong>重点嫌疑人一号：蓝佛子</strong>，嫌疑指数：★★★，众所周知，蓝佛子是魔皇之女，同样可以化形，也曾经暗恋过唐舞麟，而且，古月娜说的”身体奇特“，可以理解为是指蓝佛子是魂兽，这样蓝佛子就有两条符合了。但是史莱克学院真的会让魂兽（尤其是这种魔皇之女）来做海神阁主吗？而且守在她身边的又是谁呢？所以蓝佛子的概率，并没有特别高。</p><p><img src="/images/蓝佛子.jpg" alt="avatar"></p><p><strong>重点嫌疑人二号：凌梓晨</strong>，，嫌疑指数：★★★★★。让我们逐条比对：</p><p>1.凌所长和50的恩怨就不用我再说了吧？</p><p>2.这句话的意思应该指：凌所长的身体是由单体正向循环源泉核心构成的。在《龙王传说》中，凌所长抱着永恒天国朝血神大阵开了一炮，之后凌所长就提出了一系列惊天地泣鬼神的猜想：</p><p>​           “当我的试验接二连三成功之后，我就有了一个大胆的想法。这个想法我自己都觉得有些疯狂。先，我做了一个假设。这个假设就是，永恒天国其实是个半成品。并不是真正当初那些科学家们想要完成的。或者说是他们只完成了其中的一部分。”       </p><p>​            永恒天国是半成品？这个说法一出，顿时令众人都有种震惊莫名的感觉。 </p><p>​            凌梓晨肯定的道：“通过这次试验，可以说我证明了这一点。之所以说它是半成品，也是因为那脉络的缘故。整个永恒天国内部，完全是按照人体脉络来排列组合这些单体正像源泉核心的。可是，外壳却和内部有些格格不入。固然，它是一枚定装魂导炮弹，可是，在我看来，内部的结构如此的优秀，如此的奇思妙想，外壳却太过普通了。”    </p><p>​            “后来，我在外壳的内部一个角落中，看到了一个很小的铭刻。上面只有四个字，就是：人造战士！”      “当看到这四个字的时候，我顿时有种豁然开朗的感觉。因为我清楚的记得，早在很多年前，就曾经有一位科学家提出过。魂师虽然强大，但是，普通人在我们这个世界上如何利用魂导能量呢？是否可以将魂导能量植入普通人体内，让普通人变得和魂师一样强大呢？”  </p><p>​            “我是一个普通人，我的武魂是废武魂，根本不能修炼。但我也想变得强大，所以，这个课题也一直都是我在研究的方向。我也一直是这么做的。如你们所见，我将机甲第一个植入到自己的身体之中，通过一个个分开的单体正向循环源泉核心来形成它的能量储备。让我自己变成一名级战士。虽然无法量产，但我那时候认为自己是成功的。”    </p><p>​              “可是，这次当我结合了永恒天国内部构造之后，我就发现，原来我的方向虽然是正确的，但距离达到极致还相差的很远、很远。于是，我就有了一个大胆的想法。如果我能够将永恒天国的内部构造，通过脉络仿生学的方式，把极其庞大数量的单体正向循环源泉核心植入到体内，与机甲融合在一起。让我自己变成永恒天国。那么，是不是就能够真正制造出人造强者、级战士呢？”</p><p>上面这段节选自终极斗罗，由于篇幅问题，没有把全部论据截下来，感兴趣的可以自己去找，在第一千八百一十一章前后几章。这段话不仅说明凌所长很有可能将单体正向循环源泉核心注入自己体内，真正成为一个神坻。这也是为什么古月娜为什么会说海神阁主身体奇特的缘故。可能你会说，为什么现在的凌所长脾气那么奇怪，毕竟万年啊，可以磨平世间一切。新书后面也有提到，海神阁主之所以守在海神阁，只是因为守护史莱克，所以支撑凌所长的可能早已不是对魂导器的热爱，而是一种责任，一种唐舞麟留下来的责任。正因为这份责任，凌所长性格中的疯狂消失了，更多的是超然。</p><p>3.守在凌所长身边的，有三种可能：1.路人甲。这种我也不做解释了，可能三少一时想不好怎么填坑，就这么写了。。。2.唐舞麟的克隆体。当年凌所长要了唐舞麟十滴血，可能克隆出了一个新的唐舞麟，并且教会了他做人，所以白衣青年才叫他”老师”。3.依子尘。似乎是网友不肯放过这个角色，非要觉得他是什么毁灭之神转世。。。（或许人家只是一个推进剧情的角色呢）但既然三少花了那么多笔墨去描写，我还是处于尊敬把他写上来吧，首先是修为，依子尘天赋异禀，估计成神问题不大。另外，硬要说，依子尘是史莱克学生，而凌所长是研究魂导器的，好像叫声老师也没什么问题。。。</p><p><img src="/images/白衣青年.jpg" alt="avatar"></p><p>总而言之，我个人认为，凌所长是嫌疑最大的，不过万一三少又脑洞大开，强行解释一下，也是没办法的。。。</p><p>如有错误，欢迎指出。</p>]]></content>
      
      
      <categories>
          
          <category> 终极斗罗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终极斗罗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三体读后感</title>
      <link href="/2019/07/27/%E4%B8%89%E4%BD%93%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2019/07/27/%E4%B8%89%E4%BD%93%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 碎笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水乡往事</title>
      <link href="/2019/07/24/%E6%B0%B4%E4%B9%A1%E5%BE%80%E4%BA%8B/"/>
      <url>/2019/07/24/%E6%B0%B4%E4%B9%A1%E5%BE%80%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 碎笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
